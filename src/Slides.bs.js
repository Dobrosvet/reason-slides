// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Slide$ReactTemplate = require("./Slide.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

(( require("tianyupu-highlight.js/styles/solarized-dark.css") ));

(( require("tianyupu-highlight.js/styles/solarized-light.css") ));

function updateOrReplaceHistory(replace, slide, content) {
  var newUrl = "#/" + (String(slide) + ("/" + String(content)));
  if (replace) {
    window.history.replaceState(window.history.state, "", newUrl);
    return /* () */0;
  } else {
    window.history.pushState(window.history.state, "", newUrl);
    return /* () */0;
  }
}

function resetSlides(state, slideIndex, slideContentIndex) {
  return /* UpdateWithSideEffects */Block.__(2, [
            /* record */[
              /* currentSlide */slideIndex,
              /* currentSlideContent */slideContentIndex,
              /* keyDownHandler */state[/* keyDownHandler */2],
              /* isDarkMode */state[/* isDarkMode */3],
              /* lightStyleEl */state[/* lightStyleEl */4],
              /* darkStyleEl */state[/* darkStyleEl */5]
            ],
            (function (param) {
                var state = param[/* state */1];
                return updateOrReplaceHistory(true, state[/* currentSlide */0], state[/* currentSlideContent */1]);
              })
          ]);
}

var component = ReasonReact.reducerComponent("Slides");

function backgroundColor(isDarkMode) {
  if (isDarkMode) {
    return "#002b36";
  } else {
    return "#fdf6e3";
  }
}

function contentColor(isDarkMode) {
  if (isDarkMode) {
    return "#839496";
  } else {
    return "#657b83";
  }
}

function style(isDarkMode) {
  return {
          backgroundColor: isDarkMode ? "#002b36" : "#fdf6e3",
          color: isDarkMode ? "#839496" : "#657b83",
          height: "100%",
          overflow: "hidden",
          position: "relative",
          width: "100%"
        };
}

var controlsStyle = {
  bottom: "20px",
  position: "fixed",
  right: "10px"
};

function leftControlStyle(isDarkMode) {
  return {
          backgroundColor: "transparent",
          border: "12px solid transparent",
          borderRightColor: isDarkMode ? "#839496" : "#657b83",
          borderRightWidth: "22px",
          cursor: "pointer",
          margin: "0 5px 0 5px",
          padding: "0"
        };
}

function rightControlStyle(isDarkMode) {
  return {
          backgroundColor: "transparent",
          border: "12px solid transparent",
          borderLeftColor: isDarkMode ? "#839496" : "#657b83",
          borderLeftWidth: "22px",
          cursor: "pointer",
          margin: "0 5px 0 5px",
          padding: "0"
        };
}

function make(content, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              self[/* state */1][/* keyDownHandler */2][0] = (function (e) {
                  var match = e.key;
                  switch (match) {
                    case "ArrowRight" : 
                    case "PageDown" : 
                        return Curry._1(self[/* send */3], /* NextSlide */1);
                    case "ArrowLeft" : 
                    case "PageUp" : 
                        return Curry._1(self[/* send */3], /* PreviousSlide */0);
                    case "c" : 
                        return Curry._1(self[/* send */3], /* ToggleDarkMode */2);
                    case "f" : 
                        var match$1 = document.getElementById("index");
                        if (match$1 == null) {
                          return /* () */0;
                        } else {
                          match$1.requestFullscreen();
                          return /* () */0;
                        }
                    default:
                      return /* () */0;
                  }
                });
              document.addEventListener("keydown", self[/* state */1][/* keyDownHandler */2][0]);
              var pathSegments = window.location.hash.split("/");
              if (pathSegments.length !== 3) {
                Curry._1(self[/* send */3], /* GoToSlide */[
                      0,
                      0
                    ]);
              } else {
                var match = pathSegments[0];
                if (match === "#") {
                  var a = pathSegments[1];
                  var b = pathSegments[2];
                  Curry._1(self[/* send */3], /* GoToSlide */[
                        Caml_format.caml_int_of_string(a),
                        Caml_format.caml_int_of_string(b)
                      ]);
                } else {
                  Curry._1(self[/* send */3], /* GoToSlide */[
                        0,
                        0
                      ]);
                }
              }
              var lightEl = document.getElementById("light");
              var darkEl = document.getElementById("dark");
              var match$1 = self[/* state */1][/* isDarkMode */3];
              if (match$1) {
                if (!(lightEl == null) && !(darkEl == null)) {
                  lightEl.remove();
                  self[/* state */1][/* lightStyleEl */4][0] = Caml_option.some(lightEl);
                  self[/* state */1][/* darkStyleEl */5][0] = Caml_option.some(darkEl);
                  return /* () */0;
                } else {
                  return /* () */0;
                }
              } else if (!(lightEl == null) && !(darkEl == null)) {
                darkEl.remove();
                self[/* state */1][/* lightStyleEl */4][0] = Caml_option.some(lightEl);
                self[/* state */1][/* darkStyleEl */5][0] = Caml_option.some(darkEl);
                return /* () */0;
              } else {
                return /* () */0;
              }
            }),
          /* didUpdate */(function (param) {
              var newSelf = param[/* newSelf */1];
              var lightEl = document.getElementById("light");
              var darkEl = document.getElementById("dark");
              var bodyEl = document.querySelector("body");
              var match = newSelf[/* state */1][/* isDarkMode */3];
              var match$1 = newSelf[/* state */1][/* lightStyleEl */4][0];
              var match$2 = newSelf[/* state */1][/* darkStyleEl */5][0];
              if (match) {
                if (match$2 !== undefined) {
                  var dark = Caml_option.valFromOption(match$2);
                  if (lightEl == null) {
                    if (!(darkEl == null) || (bodyEl == null)) {
                      return /* () */0;
                    } else {
                      bodyEl.appendChild(dark);
                      return /* () */0;
                    }
                  } else if (darkEl == null) {
                    if (bodyEl == null) {
                      return /* () */0;
                    } else {
                      lightEl.remove();
                      bodyEl.appendChild(dark);
                      return /* () */0;
                    }
                  } else {
                    lightEl.remove();
                    return /* () */0;
                  }
                } else {
                  return /* () */0;
                }
              } else if (match$1 !== undefined) {
                var light = Caml_option.valFromOption(match$1);
                if (lightEl == null) {
                  if (darkEl == null) {
                    if (bodyEl == null) {
                      return /* () */0;
                    } else {
                      bodyEl.appendChild(light);
                      return /* () */0;
                    }
                  } else if (bodyEl == null) {
                    return /* () */0;
                  } else {
                    darkEl.remove();
                    bodyEl.appendChild(light);
                    return /* () */0;
                  }
                } else if (darkEl == null) {
                  return /* () */0;
                } else {
                  darkEl.remove();
                  return /* () */0;
                }
              } else {
                return /* () */0;
              }
            }),
          /* willUnmount */(function (self) {
              document.removeEventListener("keydown", self[/* state */1][/* keyDownHandler */2][0]);
              return /* () */0;
            }),
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1];
              var isDarkMode = match[/* isDarkMode */3];
              var slideContents = List.nth(content, self[/* state */1][/* currentSlide */0]);
              return React.createElement("div", {
                          style: style(isDarkMode)
                        }, ReasonReact.element(undefined, undefined, Slide$ReactTemplate.make(slideContents, self[/* state */1][/* currentSlideContent */1], /* array */[])), React.createElement("aside", {
                              style: controlsStyle
                            }, React.createElement("button", {
                                  style: leftControlStyle(isDarkMode),
                                  onClick: (function (_event) {
                                      return Curry._1(self[/* send */3], /* PreviousSlide */0);
                                    })
                                }), React.createElement("button", {
                                  style: rightControlStyle(isDarkMode),
                                  onClick: (function (_event) {
                                      return Curry._1(self[/* send */3], /* NextSlide */1);
                                    })
                                })));
            }),
          /* initialState */(function (param) {
              return /* record */[
                      /* currentSlide */0,
                      /* currentSlideContent */0,
                      /* keyDownHandler : record */[/* contents */(function (_e) {
                            return /* () */0;
                          })],
                      /* isDarkMode */true,
                      /* lightStyleEl : record */[/* contents */undefined],
                      /* darkStyleEl : record */[/* contents */undefined]
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                switch (action) {
                  case 0 : 
                      var match = state[/* currentSlide */0] > 0;
                      var lastContentOnPreviousSlide = match ? List.length(List.nth(content, state[/* currentSlide */0] - 1 | 0)) - 1 | 0 : -1;
                      var match$1 = state[/* currentSlideContent */1] <= 0;
                      var match$2 = state[/* currentSlideContent */1] <= 0 && state[/* currentSlide */0] <= 0;
                      var tmp;
                      if (match$2) {
                        tmp = 0;
                      } else {
                        var match$3 = state[/* currentSlideContent */1] <= 0;
                        tmp = Caml_primitive.caml_int_max(match$3 ? lastContentOnPreviousSlide : state[/* currentSlideContent */1] - 1 | 0, 0);
                      }
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* currentSlide */Caml_primitive.caml_int_max(match$1 ? state[/* currentSlide */0] - 1 | 0 : state[/* currentSlide */0], 0),
                                  /* currentSlideContent */tmp,
                                  /* keyDownHandler */state[/* keyDownHandler */2],
                                  /* isDarkMode */state[/* isDarkMode */3],
                                  /* lightStyleEl */state[/* lightStyleEl */4],
                                  /* darkStyleEl */state[/* darkStyleEl */5]
                                ],
                                (function (param) {
                                    var state = param[/* state */1];
                                    return updateOrReplaceHistory(false, state[/* currentSlide */0], state[/* currentSlideContent */1]);
                                  })
                              ]);
                  case 1 : 
                      var lastContentOnThisSlide = List.length(List.nth(content, state[/* currentSlide */0])) - 1 | 0;
                      var lastSlide = List.length(content) - 1 | 0;
                      var match$4 = state[/* currentSlideContent */1] >= lastContentOnThisSlide;
                      var match$5 = state[/* currentSlide */0] === lastSlide && state[/* currentSlideContent */1] === lastContentOnThisSlide;
                      var tmp$1;
                      if (match$5) {
                        tmp$1 = state[/* currentSlideContent */1];
                      } else {
                        var match$6 = state[/* currentSlideContent */1] >= lastContentOnThisSlide;
                        tmp$1 = Caml_primitive.caml_int_min(match$6 ? 0 : state[/* currentSlideContent */1] + 1 | 0, lastContentOnThisSlide);
                      }
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* currentSlide */Caml_primitive.caml_int_min(match$4 ? state[/* currentSlide */0] + 1 | 0 : state[/* currentSlide */0], lastSlide),
                                  /* currentSlideContent */tmp$1,
                                  /* keyDownHandler */state[/* keyDownHandler */2],
                                  /* isDarkMode */state[/* isDarkMode */3],
                                  /* lightStyleEl */state[/* lightStyleEl */4],
                                  /* darkStyleEl */state[/* darkStyleEl */5]
                                ],
                                (function (param) {
                                    var state = param[/* state */1];
                                    return updateOrReplaceHistory(false, state[/* currentSlide */0], state[/* currentSlideContent */1]);
                                  })
                              ]);
                  case 2 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* currentSlide */state[/* currentSlide */0],
                                  /* currentSlideContent */state[/* currentSlideContent */1],
                                  /* keyDownHandler */state[/* keyDownHandler */2],
                                  /* isDarkMode */!state[/* isDarkMode */3],
                                  /* lightStyleEl */state[/* lightStyleEl */4],
                                  /* darkStyleEl */state[/* darkStyleEl */5]
                                ]]);
                  
                }
              } else {
                var b = action[1];
                var a = action[0];
                var exit = 0;
                var slide;
                try {
                  slide = List.nth(content, a);
                  exit = 1;
                }
                catch (raw_exn){
                  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                  if (exn[0] === Caml_builtin_exceptions.failure) {
                    if (exn[1] === "nth") {
                      return resetSlides(state, 0, 0);
                    } else {
                      throw exn;
                    }
                  } else {
                    throw exn;
                  }
                }
                if (exit === 1) {
                  var exit$1 = 0;
                  var _content;
                  try {
                    _content = List.nth(slide, b);
                    exit$1 = 2;
                  }
                  catch (raw_exn$1){
                    var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
                    if (exn$1[0] === Caml_builtin_exceptions.failure) {
                      if (exn$1[1] === "nth") {
                        return resetSlides(state, 0, 0);
                      } else {
                        throw exn$1;
                      }
                    } else {
                      throw exn$1;
                    }
                  }
                  if (exit$1 === 2) {
                    return resetSlides(state, a, b);
                  }
                  
                }
                
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.updateOrReplaceHistory = updateOrReplaceHistory;
exports.resetSlides = resetSlides;
exports.component = component;
exports.backgroundColor = backgroundColor;
exports.contentColor = contentColor;
exports.style = style;
exports.controlsStyle = controlsStyle;
exports.leftControlStyle = leftControlStyle;
exports.rightControlStyle = rightControlStyle;
exports.make = make;
/*  Not a pure module */
