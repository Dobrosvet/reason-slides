// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Slide$ReactTemplate = require("./Slide.bs.js");

var component = ReasonReact.reducerComponent("Slides");

function make(content, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var slideContents = List.nth(content, self[/* state */1][/* currentSlide */0]);
              return React.createElement("div", undefined, ReasonReact.element(undefined, undefined, Slide$ReactTemplate.make(slideContents, self[/* state */1][/* currentSlideContent */1], /* array */[])), React.createElement("button", {
                              onClick: (function (_event) {
                                  return Curry._1(self[/* send */3], /* PreviousSlide */0);
                                })
                            }, "<"), React.createElement("button", {
                              onClick: (function (_event) {
                                  return Curry._1(self[/* send */3], /* NextSlide */1);
                                })
                            }, ">"));
            }),
          /* initialState */(function (param) {
              return /* record */[
                      /* currentSlide */0,
                      /* currentSlideContent */0
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (action) {
                var match = state[/* currentSlideContent */1] >= (List.length(List.nth(content, state[/* currentSlide */0])) - 1 | 0);
                var match$1 = state[/* currentSlide */0] === (List.length(content) - 1 | 0) && state[/* currentSlideContent */1] === (List.length(List.nth(content, state[/* currentSlide */0])) - 1 | 0);
                var tmp;
                if (match$1) {
                  tmp = state[/* currentSlideContent */1];
                } else {
                  var match$2 = state[/* currentSlideContent */1] >= (List.length(List.nth(content, state[/* currentSlide */0])) - 1 | 0);
                  tmp = Caml_primitive.caml_int_min(match$2 ? 0 : state[/* currentSlideContent */1] + 1 | 0, List.length(List.nth(content, state[/* currentSlide */0])) - 1 | 0);
                }
                return /* Update */Block.__(0, [/* record */[
                            /* currentSlide */Caml_primitive.caml_int_min(match ? state[/* currentSlide */0] + 1 | 0 : state[/* currentSlide */0], List.length(content) - 1 | 0),
                            /* currentSlideContent */tmp
                          ]]);
              } else {
                var match$3 = state[/* currentSlideContent */1] <= 0;
                var match$4 = state[/* currentSlideContent */1] <= 0;
                return /* Update */Block.__(0, [/* record */[
                            /* currentSlide */Caml_primitive.caml_int_max(match$3 ? state[/* currentSlide */0] - 1 | 0 : state[/* currentSlide */0], 0),
                            /* currentSlideContent */Caml_primitive.caml_int_max(match$4 ? 0 : state[/* currentSlideContent */1] - 1 | 0, 0)
                          ]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
